### Before running any Compose services, make sure you have an .env file
# inside your current folder and that it has been populated with the following content:
#   GRAFANA_ADMIN_PW=<grafana-admin-pw>
#   CONCORDIA_ADMIN_PW=<concordia-admin-pw>
#   POSTGRESQL_PW=<postgres-pw>
#   SENTRY_PW=<sentry_password_here>
#   SENTRY_SECRET_KEY=<sentry_secret_key_here>
#   EMAIL_HOST=<your_smtp_email_host_here>
#   EMAIL_HOST_USER=<your_smtp_email_host_user_here>
#   EMAIL_HOST_PASSWORD=<your_smtp_email_host_password_here>
#   DEFAULT_FROM_EMAIL=<your_email_from_address_here>


### Start Docker containers with the following command :
#  sudo make up

### Create grafana user and assign the grafana admin password.
#  with docker-compose running, in a separate terminal window, enter the following commands:
#
#  sudo docker exec -it concordia_grafana bash -c "./setup.sh/grafana_post_run.sh"

version: '3.6'
services:
  db:
    image: postgres
    env_file: ./.env
    environment:
      POSTGRES_PASSWORD: ${POSTGRESQL_PW}
      POSTGRES_USER: concordia
    ports:
      - 54321:5432
    volumes:
      - ./postgresql:/docker-entrypoint-initdb.d
      - db_volume:/var/lib/postgresl/data/
    environment:
        - POSTGRES_MULTIPLE_DATABASES=concordia,sentry

  rabbit:
    hostname: rabbit
    image: rabbitmq:latest
    ports:
      - 5672:5672
      - 15672:15672
      
  elk:
    image: sebp/elk
    ports:
      - "5601:5601"
      - "9200:9200"
      - "5044:5044"

  app:
    env_file: ./.env
    build: .
    environment:
      # The concordia app needs to wait for the db to completely start. Use docker-compose-wait
      # as defined at https://github.com/ufoscout/docker-compose-wait
      WAIT_HOSTS: db:5432, elk:9200
    depends_on:
      - db
      - elk
    volumes:
      - .:/app
      - images_volume:/concordia_images
    links:
      - rabbit
      - elk
    ports:
      - 80:80

  importer:
    build:
       context: .
       dockerfile: importer/Dockerfile
    depends_on:
      - rabbit
    volumes:
      - images_volume:/concordia_images

  prometheus:
    image: prom/prometheus:latest
    container_name: concordia_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=200h'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    ports:
      - 9090:9090

  node-exporter:
    image: prom/node-exporter:latest
    container_name: concordia_node_exporter
    restart: unless-stopped
    expose:
      - 9100
    ports:
      - 9100:9100

  grafana:
    env_file: ./.env
    restart: always
    image: grafana/grafana:latest
    container_name: concordia_grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/datasources
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/setup.sh:/setup.sh
    expose:
      - 3000
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PW}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=myadrress@gmail.com
      - GF_SMTP_PASSWORD=mypassword
      - GF_SMTP_FROM_ADDRESS=myaddress@gmail.com

  alertmanager:
    image: prom/alertmanager:latest
    build: ./alertmanager
    command:
      - '--config.file=/alertmanager.yml'

  sentry:
    env_file: ./.env
    image: sentry:9
    restart: unless-stopped
    ports:
     - 9000:9000
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_REDIS_HOST=sentry_redis
      - SENTRY_POSTGRES_HOST=db
      - SENTRY_DB_USER=sentry
      - SENTRY_DB_PASSWORD=${POSTGRESQL_PW}

  cron:
    env_file: ./.env
    image: sentry:9
    restart: unless-stopped
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_REDIS_HOST=sentry_redis
      - SENTRY_POSTGRES_HOST=db
      - SENTRY_DB_USER=sentry
      - SENTRY_DB_PASSWORD=${POSTGRESQL_PW}
    command: run cron

  worker:
    env_file: ./.env
    image: sentry:9
    restart: unless-stopped
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_REDIS_HOST=sentry_redis
      - SENTRY_POSTGRES_HOST=db
      - SENTRY_DB_USER=sentry
      - SENTRY_DB_PASSWORD=${POSTGRESQL_PW}
    command: run worker

  sentry_redis:
    image: redis:4.0-alpine
    restart: unless-stopped

  wait_sentry_redis:
    image: "waisbrot/wait"
    environment:
      TARGETS: sentry_redis:6379

  wait_sentry_postgres:
    image: "waisbrot/wait"
    environment:
      TARGETS: db:5432
  
  wait_elk:
    image: "waisbrot/wait"
    environment:
      TARGETS: elk:9200

volumes:
  db_volume:
  images_volume:
  grafana_data: {}
  prometheus_data: {}

networks:
  default:
    external:
      name: sentry
